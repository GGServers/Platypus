{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","servers","websocketMessage","bind","assertThisInitialized","new_uri","loc","window","location","protocol","host","pathname","socket","WebSocket","onopen","event","console","log","onmessage","JSON","parse","data","serversArray","key","push","setState","react_default","a","createElement","className","App_ServersHeading","App_Servers","Component","Servers","serverComponents","map","server","App_Server","stats","hostname","Server","online","cpu","memory","disk","ServersHeading","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IAEXR,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACxB,IAA2BY,EAAvBC,EAAMC,OAAOC,SANA,OAQfH,EADmB,WAAjBC,EAAIG,SACI,OAEA,MAEZJ,GAAW,KAAOC,EAAII,KACtBL,GAAWC,EAAIK,SAAW,WAE1BlB,EAAKmB,OAAS,IAAIC,UAAUR,GAC5BZ,EAAKmB,OAAOE,OAAS,SAACC,GACpBC,QAAQC,IAAI,qBAEdxB,EAAKmB,OAAOM,UAAY,SAACH,GAAYtB,EAAKS,iBAAiBa,IAnB1CtB,gFAsBFsB,GACf,IAAId,EAAUkB,KAAKC,MAAML,EAAMM,MAC3BC,EAAe,GACnB,IAAK,IAAIC,KAAOtB,EACdqB,EAAaE,KAAKvB,EAAQsB,IAE5B3B,KAAK6B,SAAS,CAAExB,QAASqB,qCAGzB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAACG,EAAD,CAAS9B,QAASL,KAAKI,MAAMC,oBArCvB+B,cA6CZC,mLAEF,IAAIC,EAAmBtC,KAAKJ,MAAMS,QAAQkC,IAAI,SAACC,GAC7C,OAAOV,EAAAC,EAAAC,cAACS,EAAD,CAAQd,IAAKa,EAAOE,MAAMC,SAAUH,OAAQA,MAErD,OAAOV,EAAAC,EAAAC,cAAA,WAAMM,UALKF,aAShBQ,mLAEF,OACEd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYjC,KAAKJ,MAAM4C,OAAOE,MAAMC,UAClDb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAoC,IAA7BjC,KAAKJ,MAAM4C,OAAOK,OAAkB7C,KAAKJ,MAAM4C,OAAOE,MAAMI,IAAM,IAAM,WAC7FhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAuC,IAA7BjC,KAAKJ,MAAM4C,OAAOK,OAAkB7C,KAAKJ,MAAM4C,OAAOE,MAAMK,OAAS,IAAM,WACnGjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAqC,IAA7BjC,KAAKJ,MAAM4C,OAAOK,OAAkB7C,KAAKJ,MAAM4C,OAAOE,MAAMM,KAAO,IAAM,mBAPlFZ,aAafa,mLAEF,OACEnB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,iCARmBI,aAedzC,ICzEKuD,QACW,cAA7BvC,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASQ,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cfe6a328.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      servers: []\n    };\n    this.websocketMessage = this.websocketMessage.bind(this);\n    var loc = window.location, new_uri;\n    if (loc.protocol === \"https:\") {\n      new_uri = \"wss:\";\n    } else {\n      new_uri = \"ws:\";\n    }\n    new_uri += \"//\" + loc.host;\n    new_uri += loc.pathname + \"getstats\";\n\n    this.socket = new WebSocket(new_uri);\n    this.socket.onopen = (event) => {\n      console.log(\"websocket opened\")\n    };\n    this.socket.onmessage = (event) => { this.websocketMessage(event) };\n  }\n\n  websocketMessage(event) {\n    let servers = JSON.parse(event.data);\n    let serversArray = [];\n    for (var key in servers) {\n      serversArray.push(servers[key]);\n    }\n    this.setState({ servers: serversArray });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <table>\n          <ServersHeading />\n          <tbody>\n            <Servers servers={this.state.servers} />\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass Servers extends Component {\n  render() {\n    let serverComponents = this.props.servers.map((server) => {\n      return <Server key={server.stats.hostname} server={server} />\n    });\n    return <div>{serverComponents}</div>;\n  }\n}\n\nclass Server extends Component {\n  render() {\n    return (\n      <tr className=\"Server\">\n        <td className=\"Hostname\">{this.props.server.stats.hostname}</td>\n        <td className=\"Cpu\">{this.props.server.online === true ? this.props.server.stats.cpu + '%' : 'OFFLINE'}</td>\n        <td className=\"Memory\">{this.props.server.online === true ? this.props.server.stats.memory + '%' : 'OFFLINE'}</td>\n        <td className=\"Disk\">{this.props.server.online === true ? this.props.server.stats.disk + '%' : 'OFFLINE'}</td>\n      </tr>\n    );\n  }\n}\n\nclass ServersHeading extends Component {\n  render() {\n    return (\n      <thead>\n        <tr className=\"ServersHeading\">\n          <th>Hostname</th>\n          <th>CPU Usage</th>\n          <th>Memory Usage</th>\n          <th>Disk Usage</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}