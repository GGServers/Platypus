{
  "name": "Platypus",
  "tagline": "(new) Internal GGServers Status Page Flask Application",
  "body": "# Platypus\r\n(new) Internal GGServers Status Page Flask Application\r\n\r\nScans servers and caches the results in a .json file that\r\nis refreshed once the cache has aged 15 minutes or more.\r\n\r\n### Current Features\r\n - Scan servers from .json list\r\n - Cache results along with time of scan \r\n - Can filter by physical server location\r\n - Force rescan of all servers\r\n \r\n### Planned Features\r\n - Sleeker webpage\r\n - Slack bot intergration\r\n - RESTful API\r\n - Dedicated configuration file\r\n - Docker image\r\n\r\n## Requirements\r\n - Python 3.x\r\n - Flask 0.11.x\r\n - `requests` Python Library\r\n \r\n## Running\r\n`__init__.py` is where the magic happens. For testing, you can\r\ndo the following:\r\n\r\n```\r\ngit clone git@github.com:GGServers/Platypus.git\r\n\r\ncd Platypus/\r\n\r\nexport FLASK_APP=__init__.py\r\n\r\npython -m flask run\r\n```\r\n\r\n## Configuration\r\nStore all the servers you want to check the status of in `servers.json`.\r\nThe basic layout is like so:\r\n\r\n```\r\n[\r\n\t{\r\n\t\t\"name\" : \"Panel 1\",\r\n\t\t\"hostname\" : \"first.gmem.pw\",\r\n\t\t\"location\" : \"MT\"\r\n\t},\r\n\t{\r\n\t\t\"name\" : \"Panel 2\",\r\n\t\t\"hostname\" : \"second.gmem.pw\",\r\n\t\t\"location\" : \"LA\"\r\n\t}\r\n]\r\n```\r\n\r\n - `name`: What you want the server to show up as on the list\r\n - `hostname`: The location of your server. Can be IP or domain.\r\n - `location`: For geolocation filtering.\r\n \r\n## Paths\r\n\r\n| URL | What |\r\n| --- | ---- |\r\n| `/` | Main homepage, loads all servers |\r\n| `/blob/<location>` | Displays servers from a specific location |\r\n| `/forcescan` | Forces Python to scan all the servers again |",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}